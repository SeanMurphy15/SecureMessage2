//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Sean Murphy on 9/16/16.
//  Copyright Â© 2016 Sean Murphy. All rights reserved.
//

import UIKit
import Messages
import LocalAuthentication


class MessagesViewController: MSMessagesAppViewController {

	var currentConversation : MSConversation?
	var rawMessage = ""

	let defaultView = DefaultView.instanceFromNib()
	let messageView = MessageView.instanceFromNib()
	override func viewDidLoad() {
		super.viewDidLoad()
		self.view.addSubview(defaultView)
		defaultView.frame = self.view.bounds
		defaultView.animateScan()
		messageView.delegate = self
	}

	override func didReceiveMemoryWarning() {
		super.didReceiveMemoryWarning()
		// Dispose of any resources that can be recreated.
	}

	// MARK: - Conversation Handling

	override func willBecomeActive(with conversation: MSConversation) {

		currentConversation = conversation
	}

	override func willSelect(_ message: MSMessage, conversation: MSConversation) {

	}
	override func didSelect(_ message: MSMessage, conversation: MSConversation) {

		if let secretMessage = message.url?.path {

			self.messageView.textView.text = secretMessage
			self.messageView.replyButton.isHidden = false
			self.messageView.enterButton.isHidden = true

		}


	}

	override func didResignActive(with conversation: MSConversation) {
		// Called when the extension is about to move from the active to inactive state.
		// This will happen when the user dissmises the extension, changes to a different
		// conversation or quits Messages.
		// Use this method to release shared resources, save user data, invalidate timers,
		// and store enough state information to restore your extension to its current state
		// in case it is terminated later.
	}

	override func didReceive(_ message: MSMessage, conversation: MSConversation) {
		// Called when a message arrives that was generated by another instance of this
		// extension on a remote device.

		// Use this method to trigger UI updates in response to the message.
	}

	override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
		// Called when the user taps the send button.
	}

	override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
		// Called when the user deletes the message without sending it.

		// Use this to clean up state related to the deleted message.
	}

	override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
		// Called before the extension transitions to a new presentation style.

		// Use this method to prepare for the change in presentation style.
	}


	override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
		switch presentationStyle {
		case .expanded:
			self.view.addSubview(messageView)
			messageView.frame = self.view.bounds
			messageView.updateUI()
			self.defaultView.removeFromSuperview()
		case .compact:
			self.view.addSubview(defaultView)
			defaultView.frame = self.view.bounds
			defaultView.animateScan()
			self.messageView.removeFromSuperview()
		}
	}
}

//TEXTFIELD

extension MessagesViewController: MessageViewDelegate{

	func TextViewContent(content: String) {

		rawMessage = content
	}

	func EnterButtonPressed(bool: Bool) {
		if bool {
			authenticateSentMessageWithTouchID()
		}
	}
}

//TOUCH ID

extension MessagesViewController{

	func authenticateSentMessageWithTouchID() {
		let authenticationContext = LAContext()
		var error:NSError?
		guard authenticationContext.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) else {

			showAlertViewIfNoBiometricSensorHasBeenDetected()
			return

		}

		authenticationContext.evaluatePolicy(
			.deviceOwnerAuthenticationWithBiometrics,
			localizedReason: "Only the owner of this device is able to view secret messages!",
			reply: { [unowned self] (success, error) -> Void in

				if( success ) {

					let message = MSMessage()
					let layout = MSMessageTemplateLayout()
					layout.caption = "Secure Message"
					message.layout = layout
					message.url = URL(string: self.rawMessage)
					message.shouldExpire = true
					print("ORIGINAL MESSAGE \(message.url)")
					self.currentConversation?.insert(message, completionHandler: { (error) in
						if error == nil {

							self.dismiss()

						} else {
							self.showAlertWithTitle(title: "Error", message: "There seems to be a problem. Please try again!")
						}
					})


				}else {

					// Check if there is an error
					if let error = error {

						let message = self.errorMessageForLAErrorCode(errorCode: error)
						self.showAlertViewAfterEvaluatingPolicyWithMessage(message: message)

					}

				}

			})
	}


	func errorMessageForLAErrorCode( errorCode:Error ) -> String{

		var message = ""

		switch errorCode {

		case LAError.appCancel:
			message = "Authentication was cancelled by application"

		case LAError.authenticationFailed:
			message = "The user failed to provide valid credentials"

		case LAError.invalidContext:
			message = "The context is invalid"

		case LAError.passcodeNotSet:
			message = "Passcode is not set on the device"

		case LAError.systemCancel:
			message = "Authentication was cancelled by the system"

		case LAError.touchIDLockout:
			message = "Too many failed attempts."

		case LAError.touchIDNotAvailable:
			message = "TouchID is not available on the device"

		case LAError.userCancel:
			message = "The user did cancel"

		case LAError.userFallback:
			message = "The user chose to use the fallback"

		default:
			message = "Did not find error code on LAError object"

		}

		return message

	}

}

// ALERTS

extension MessagesViewController {
	func showAlertWithTitle( title:String, message:String ) {

		let alertVC = UIAlertController(title: title, message: message, preferredStyle: .alert)

		let okAction = UIAlertAction(title: "Ok", style: .default, handler: nil)
		alertVC.addAction(okAction)

		DispatchQueue.main.async(execute: {
			self.present(alertVC, animated: true, completion: nil)
		})
	}

	func showAlertViewAfterEvaluatingPolicyWithMessage( message:String ){

		showAlertWithTitle(title: "Error", message: message)

	}


	func showAlertViewIfNoBiometricSensorHasBeenDetected(){

		showAlertWithTitle(title: "Error", message: "This device does not have a TouchID sensor.")

	}
}

